# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y_LFq20TpSn38GjV-gduvE2kiCHfaPYp
"""

import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.graph_objs as go
import pandas as pd
import requests
from datetime import datetime, timedelta

app = dash.Dash(__name__)

# URL de la API de Thingspeak
url = 'https://thingspeak.com/channels/2128945/feeds.csv?api_key=TAMA6DG3ST64BW89&start=2023-10-19T00:00-00:00&end=2025-11-13T23:59-03:00&timezone=America/Santiago'

def cargar_datos():
    # Descargar los datos
    df_temporal = pd.read_csv(url)

    # Renombrar columnas
    df_temporal.rename(columns={
        'field1': 'T',
        'field3': 'HR',
        'field4': 'MP10',
        'field5': 'MP25',
        'created_at': 'Fecha'
    }, inplace=True)

    # Limpiar datos
    df_temporal.drop_duplicates(inplace=True)
    df_temporal['MP10'] = df_temporal['MP10'].astype(int)
    df_temporal['MP25'] = df_temporal['MP25'].astype(int)
    df_temporal['Fecha Actualizada'] = pd.to_datetime(df_temporal['Fecha'].str[:-6], format='%Y-%m-%d %H:%M:%S')

    return df_temporal

df_estacion = cargar_datos()

# Calcular la media de las últimas 24 horas
df_estacion['Fecha Actualizada'] = pd.to_datetime(df_estacion['Fecha Actualizada'])
ultima_fecha = df_estacion['Fecha Actualizada'].max()
inicio_24h = ultima_fecha - timedelta(hours=24)
df_ultimas_24h = df_estacion[df_estacion['Fecha Actualizada'] >= inicio_24h]
media_24h = df_ultimas_24h[['MP10', 'MP25']].mean()

# Crear las visualizaciones
app.layout = html.Div(children=[
    html.H1(children='Visualización de Datos de Estación'),

    dcc.Graph(
        id='time-series-mp10',
        figure={
            'data': [go.Scatter(
                x=df_estacion['Fecha Actualizada'],
                y=df_estacion['MP10'],
                mode='lines+markers',
                name='MP10'
            )],
            'layout': go.Layout(
                title='Serie de Tiempo de MP10',
                xaxis={'title': 'Fecha'},
                yaxis={'title': 'MP10'}
            )
        }
    ),

    dcc.Graph(
        id='time-series-mp25',
        figure={
            'data': [go.Scatter(
                x=df_estacion['Fecha Actualizada'],
                y=df_estacion['MP25'],
                mode='lines+markers',
                name='MP25'
            )],
            'layout': go.Layout(
                title='Serie de Tiempo de MP25',
                xaxis={'title': 'Fecha'},
                yaxis={'title': 'MP25'}
            )
        }
    ),

    html.H2(children='Último Valor Medido'),
    html.Table([
        html.Tr([html.Th('Parámetro'), html.Th('Último Valor')]),
        html.Tr([html.Td('MP10'), html.Td(df_estacion['MP10'].iloc[-1])]),
        html.Tr([html.Td('MP25'), html.Td(df_estacion['MP25'].iloc[-1])])
    ]),

    html.H2(children='Media de los Últimos 24 Horas'),
    html.Table([
        html.Tr([html.Th('Parámetro'), html.Th('Media 24h')]),
        html.Tr([html.Td('MP10'), html.Td(media_24h['MP10'])]),
        html.Tr([html.Td('MP25'), html.Td(media_24h['MP25'])])
    ])
])

if __name__ == '__main__':
    app.run_server(debug=True)